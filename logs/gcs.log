
> gcs@0.1.0 start
> react-scripts start

(node:27992) [DEP0176] DeprecationWarning: fs.F_OK is deprecated, use fs.constants.F_OK instead
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:27992) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(node:27992) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
Starting the development server...

Compiled successfully!

You can now view gcs in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.1.5:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/types/mission.ts:137:3
TS2717: Subsequent property declarations must have the same type.  Property 'homeLocationSource' must be of type '"ip" | "gps" | "manual"', but here has type '"ip" | "gps" | "manual" | "zipcode"'.
    135 |   currentPlan: FlightPlan | null;
    136 |   homeLocation: Position;
  > 137 |   homeLocationSource: 'ip' | 'gps' | 'manual' | 'zipcode';
        |   ^^^^^^^^^^^^^^^^^^
    138 |   selectedWaypoint: string | null;
    139 |   selectedBlock: string | null;
    140 |   editMode: 'view' | 'waypoints' | 'blocks' | 'sectors';

Compiling...
Compiled successfully!
webpack compiled successfully
ERROR in src/types/mission.ts:137:3
TS2717: Subsequent property declarations must have the same type.  Property 'homeLocationSource' must be of type '"ip" | "gps" | "manual"', but here has type '"ip" | "gps" | "manual" | "zipcode"'.
    135 |   currentPlan: FlightPlan | null;
    136 |   homeLocation: Position;
  > 137 |   homeLocationSource: 'ip' | 'gps' | 'manual' | 'zipcode';
        |   ^^^^^^^^^^^^^^^^^^
    138 |   selectedWaypoint: string | null;
    139 |   selectedBlock: string | null;
    140 |   editMode: 'view' | 'waypoints' | 'blocks' | 'sectors';

Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled successfully!
webpack compiled successfully
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/App.tsx
  Line 6:8:  'MissionPlanner' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:39:30
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    37 |
    38 |   const addAction = (actionTemplate: WaypointAction) => {
  > 39 |     const actions = waypoint.actions || [];
       |                              ^^^^^^^
    40 |     const newAction = { ...actionTemplate, id: `action_${Date.now()}` };
    41 |     handleFieldChange('actions', [...actions, newAction]);
    42 |   };

ERROR in src/components/WaypointEditor.tsx:41:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    39 |     const actions = waypoint.actions || [];
    40 |     const newAction = { ...actionTemplate, id: `action_${Date.now()}` };
  > 41 |     handleFieldChange('actions', [...actions, newAction]);
       |                       ^^^^^^^^^
    42 |   };
    43 |
    44 |   const updateAction = (index: number, updatedAction: WaypointAction) => {

ERROR in src/components/WaypointEditor.tsx:45:35
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    43 |
    44 |   const updateAction = (index: number, updatedAction: WaypointAction) => {
  > 45 |     const actions = [...(waypoint.actions || [])];
       |                                   ^^^^^^^
    46 |     actions[index] = updatedAction;
    47 |     handleFieldChange('actions', actions);
    48 |   };

ERROR in src/components/WaypointEditor.tsx:47:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    45 |     const actions = [...(waypoint.actions || [])];
    46 |     actions[index] = updatedAction;
  > 47 |     handleFieldChange('actions', actions);
       |                       ^^^^^^^^^
    48 |   };
    49 |
    50 |   const removeAction = (index: number) => {

ERROR in src/components/WaypointEditor.tsx:51:35
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    49 |
    50 |   const removeAction = (index: number) => {
  > 51 |     const actions = [...(waypoint.actions || [])];
       |                                   ^^^^^^^
    52 |     actions.splice(index, 1);
    53 |     handleFieldChange('actions', actions);
    54 |   };

ERROR in src/components/WaypointEditor.tsx:53:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    51 |     const actions = [...(waypoint.actions || [])];
    52 |     actions.splice(index, 1);
  > 53 |     handleFieldChange('actions', actions);
       |                       ^^^^^^^^^
    54 |   };
    55 |
    56 |   const waypointOptions = flightPlan.waypoints.map(wp => ({

ERROR in src/components/WaypointEditor.tsx:218:43
TS2345: Argument of type 'Partial<WaypointAction>' is not assignable to parameter of type 'WaypointAction'.
  Types of property 'type' are incompatible.
    Type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude" | undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
      Type 'undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
    216 |                 onChange={(e) => {
    217 |                   const template = WAYPOINT_ACTION_TEMPLATES[e.target.value as keyof typeof WAYPOINT_ACTION_TEMPLATES];
  > 218 |                   if (template) addAction(template);
        |                                           ^^^^^^^^
    219 |                   e.target.value = '';
    220 |                 }}
    221 |                 style={{

ERROR in src/components/WaypointEditor.tsx:241:21
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    239 |           </div>
    240 |
  > 241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
        |                     ^^^^^^^
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
    243 |               {waypoint.actions.map((action, index) => (
    244 |                 <div

ERROR in src/components/WaypointEditor.tsx:241:41
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    239 |           </div>
    240 |
  > 241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
        |                                         ^^^^^^^
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
    243 |               {waypoint.actions.map((action, index) => (
    244 |                 <div

ERROR in src/components/WaypointEditor.tsx:243:25
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                         ^^^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

ERROR in src/components/WaypointEditor.tsx:243:38
TS7006: Parameter 'action' implicitly has an 'any' type.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                                      ^^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

ERROR in src/components/WaypointEditor.tsx:243:46
TS7006: Parameter 'index' implicitly has an 'any' type.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                                              ^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:39:30
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    37 |
    38 |   const addAction = (actionTemplate: WaypointAction) => {
  > 39 |     const actions = waypoint.actions || [];
       |                              ^^^^^^^
    40 |     const newAction = { ...actionTemplate, id: `action_${Date.now()}` };
    41 |     handleFieldChange('actions', [...actions, newAction]);
    42 |   };

ERROR in src/components/WaypointEditor.tsx:41:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    39 |     const actions = waypoint.actions || [];
    40 |     const newAction = { ...actionTemplate, id: `action_${Date.now()}` };
  > 41 |     handleFieldChange('actions', [...actions, newAction]);
       |                       ^^^^^^^^^
    42 |   };
    43 |
    44 |   const updateAction = (index: number, updatedAction: WaypointAction) => {

ERROR in src/components/WaypointEditor.tsx:45:35
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    43 |
    44 |   const updateAction = (index: number, updatedAction: WaypointAction) => {
  > 45 |     const actions = [...(waypoint.actions || [])];
       |                                   ^^^^^^^
    46 |     actions[index] = updatedAction;
    47 |     handleFieldChange('actions', actions);
    48 |   };

ERROR in src/components/WaypointEditor.tsx:47:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    45 |     const actions = [...(waypoint.actions || [])];
    46 |     actions[index] = updatedAction;
  > 47 |     handleFieldChange('actions', actions);
       |                       ^^^^^^^^^
    48 |   };
    49 |
    50 |   const removeAction = (index: number) => {

ERROR in src/components/WaypointEditor.tsx:51:35
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    49 |
    50 |   const removeAction = (index: number) => {
  > 51 |     const actions = [...(waypoint.actions || [])];
       |                                   ^^^^^^^
    52 |     actions.splice(index, 1);
    53 |     handleFieldChange('actions', actions);
    54 |   };

ERROR in src/components/WaypointEditor.tsx:53:23
TS2345: Argument of type '"actions"' is not assignable to parameter of type 'keyof Waypoint'.
    51 |     const actions = [...(waypoint.actions || [])];
    52 |     actions.splice(index, 1);
  > 53 |     handleFieldChange('actions', actions);
       |                       ^^^^^^^^^
    54 |   };
    55 |
    56 |   const waypointOptions = flightPlan.waypoints.map(wp => ({

ERROR in src/components/WaypointEditor.tsx:218:43
TS2345: Argument of type 'Partial<WaypointAction>' is not assignable to parameter of type 'WaypointAction'.
  Types of property 'type' are incompatible.
    Type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude" | undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
      Type 'undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
    216 |                 onChange={(e) => {
    217 |                   const template = WAYPOINT_ACTION_TEMPLATES[e.target.value as keyof typeof WAYPOINT_ACTION_TEMPLATES];
  > 218 |                   if (template) addAction(template);
        |                                           ^^^^^^^^
    219 |                   e.target.value = '';
    220 |                 }}
    221 |                 style={{

ERROR in src/components/WaypointEditor.tsx:241:21
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    239 |           </div>
    240 |
  > 241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
        |                     ^^^^^^^
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
    243 |               {waypoint.actions.map((action, index) => (
    244 |                 <div

ERROR in src/components/WaypointEditor.tsx:241:41
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    239 |           </div>
    240 |
  > 241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
        |                                         ^^^^^^^
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
    243 |               {waypoint.actions.map((action, index) => (
    244 |                 <div

ERROR in src/components/WaypointEditor.tsx:243:25
TS2339: Property 'actions' does not exist on type 'Waypoint'.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                         ^^^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

ERROR in src/components/WaypointEditor.tsx:243:38
TS7006: Parameter 'action' implicitly has an 'any' type.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                                      ^^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

ERROR in src/components/WaypointEditor.tsx:243:46
TS7006: Parameter 'index' implicitly has an 'any' type.
    241 |           {waypoint.actions && waypoint.actions.length > 0 ? (
    242 |             <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
  > 243 |               {waypoint.actions.map((action, index) => (
        |                                              ^^^^^
    244 |                 <div
    245 |                   key={index}
    246 |                   style={{

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WaypointEditor.tsx:218:43
TS2345: Argument of type 'Partial<WaypointAction>' is not assignable to parameter of type 'WaypointAction'.
  Types of property 'type' are incompatible.
    Type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude" | undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
      Type 'undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
    216 |                 onChange={(e) => {
    217 |                   const template = WAYPOINT_ACTION_TEMPLATES[e.target.value as keyof typeof WAYPOINT_ACTION_TEMPLATES];
  > 218 |                   if (template) addAction(template);
        |                                           ^^^^^^^^
    219 |                   e.target.value = '';
    220 |                 }}
    221 |                 style={{

ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:218:43
TS2345: Argument of type 'Partial<WaypointAction>' is not assignable to parameter of type 'WaypointAction'.
  Types of property 'type' are incompatible.
    Type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude" | undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
      Type 'undefined' is not assignable to type '"go" | "stay" | "circle" | "eight" | "oval" | "survey_rectangle" | "home" | "heading" | "attitude"'.
    216 |                 onChange={(e) => {
    217 |                   const template = WAYPOINT_ACTION_TEMPLATES[e.target.value as keyof typeof WAYPOINT_ACTION_TEMPLATES];
  > 218 |                   if (template) addAction(template);
        |                                           ^^^^^^^^
    219 |                   e.target.value = '';
    220 |                 }}
    221 |                 style={{

ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

ERROR in src/types/mission.ts:193:5
TS2322: Type 'string' is not assignable to type 'number'.
    191 |     type: 'survey_rectangle' as const,
    192 |     grid: 50,
  > 193 |     orientation: 'NS' as const
        |     ^^^^^^^^^^^
    194 |   }
    195 | };
    196 |

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

ERROR in src/types/mission.ts:193:5
TS2322: Type 'string' is not assignable to type 'number'.
    191 |     type: 'survey_rectangle' as const,
    192 |     grid: 50,
  > 193 |     orientation: 'NS' as const
        |     ^^^^^^^^^^^
    194 |   }
    195 | };
    196 |

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/WaypointEditor.tsx:327:77
TS2322: Type '"NS" | "WE"' is not assignable to type 'number | undefined'.
  Type 'string' is not assignable to type 'number'.
    325 |                         <select
    326 |                           value={action.orientation || 'NS'}
  > 327 |                           onChange={(e) => updateAction(index, { ...action, orientation: e.target.value as 'NS' | 'WE' })}
        |                                                                             ^^^^^^^^^^^
    328 |                           style={{ width: '100%', padding: '0.25rem', fontSize: '0.8rem' }}
    329 |                         >
    330 |                           <option value="NS">North-South</option>

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 8:8:  'WaypointEditor' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 8:8:  'WaypointEditor' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 8:8:    'WaypointEditor' is defined but never used           @typescript-eslint/no-unused-vars
  Line 172:9:  'updateWaypoint' is assigned a value but never used  @typescript-eslint/no-unused-vars
  Line 187:9:  'deleteWaypoint' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 8:8:    'WaypointEditor' is defined but never used           @typescript-eslint/no-unused-vars
  Line 172:9:  'updateWaypoint' is assigned a value but never used  @typescript-eslint/no-unused-vars
  Line 187:9:  'deleteWaypoint' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 204:9:  'handleHomeDrag' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 204:9:  'handleHomeDrag' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 204:9:  'handleHomeDrag' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 204:9:  'handleHomeDrag' is assigned a value but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
No issues found.
Compiling...
Failed to compile.

SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (241:8)
  239 |
  240 |   // Handle home marker drag
> 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  242 |     const newPosition: Position = {
  243 |       latitude: e.target.getLatLng().lat,
  244 |       longitude: e.target.getLatLng().lng,
WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 241:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (241:8)

  239 |
  240 |   // Handle home marker drag
> 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  242 |     const newPosition: Position = {
  243 |       latitude: e.target.getLatLng().lat,
  244 |       longitude: e.target.getLatLng().lng,
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptScopeHandler.checkRedeclarationInScope (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1646:19)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1612:12)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4909:11)
    at TypeScriptParserMixin.declareNameFromIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7594:16)
    at TypeScriptParserMixin.checkIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7590:12)
    at TypeScriptParserMixin.checkLVal (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7527:12)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13488:10)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseStatementListItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12823:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:61)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseBlock (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13373:10)
    at TypeScriptParserMixin.parseFunctionBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12174:24)
    at TypeScriptParserMixin.parseArrowExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12149:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11759:12)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11395:23)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4793:20)
    at TypeScriptParserMixin.parseExprSubscripts (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11145:23)
    at TypeScriptParserMixin.parseUpdate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11130:21)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11110:23)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9890:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10963:61)
    at TypeScriptParserMixin.parseExprOps (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10968:23)
    at TypeScriptParserMixin.parseMaybeConditional (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10945:23)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10895:21)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9839:20)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:39
    at TypeScriptParserMixin.allowInAnd (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12495:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:17)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13460:91)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)

webpack compiled with 1 error and 1 warning
ERROR in src/components/MissionPlanner.tsx:204:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    202 |
    203 |   // Handle home location drag
  > 204 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    205 |     const newPosition: Position = {
    206 |       latitude: e.target.getLatLng().lat,
    207 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:241:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    239 |
    240 |   // Handle home marker drag
  > 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    242 |     const newPosition: Position = {
    243 |       latitude: e.target.getLatLng().lat,
    244 |       longitude: e.target.getLatLng().lng,

Compiling...
Failed to compile.

SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (241:8)
  239 |
  240 |   // Handle home marker drag
> 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  242 |     const newPosition: Position = {
  243 |       latitude: e.target.getLatLng().lat,
  244 |       longitude: e.target.getLatLng().lng,
WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 241:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (241:8)

  239 |
  240 |   // Handle home marker drag
> 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  242 |     const newPosition: Position = {
  243 |       latitude: e.target.getLatLng().lat,
  244 |       longitude: e.target.getLatLng().lng,
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptScopeHandler.checkRedeclarationInScope (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1646:19)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1612:12)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4909:11)
    at TypeScriptParserMixin.declareNameFromIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7594:16)
    at TypeScriptParserMixin.checkIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7590:12)
    at TypeScriptParserMixin.checkLVal (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7527:12)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13488:10)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseStatementListItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12823:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:61)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseBlock (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13373:10)
    at TypeScriptParserMixin.parseFunctionBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12174:24)
    at TypeScriptParserMixin.parseArrowExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12149:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11759:12)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11395:23)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4793:20)
    at TypeScriptParserMixin.parseExprSubscripts (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11145:23)
    at TypeScriptParserMixin.parseUpdate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11130:21)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11110:23)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9890:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10963:61)
    at TypeScriptParserMixin.parseExprOps (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10968:23)
    at TypeScriptParserMixin.parseMaybeConditional (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10945:23)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10895:21)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9839:20)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:39
    at TypeScriptParserMixin.allowInAnd (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12495:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:17)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13460:91)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)

webpack compiled with 1 error and 1 warning
ERROR in src/components/MissionPlanner.tsx:204:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    202 |
    203 |   // Handle home location drag
  > 204 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    205 |     const newPosition: Position = {
    206 |       latitude: e.target.getLatLng().lat,
    207 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:241:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    239 |
    240 |   // Handle home marker drag
  > 241 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    242 |     const newPosition: Position = {
    243 |       latitude: e.target.getLatLng().lat,
    244 |       longitude: e.target.getLatLng().lng,

Compiling...
Failed to compile.

SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (240:8)
  238 |
  239 |   // Handle home location drag
> 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  241 |     const newPosition: Position = {
  242 |       latitude: e.target.getLatLng().lat,
  243 |       longitude: e.target.getLatLng().lng,
WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 240:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare
  Line 277:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (240:8)

  238 |
  239 |   // Handle home location drag
> 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  241 |     const newPosition: Position = {
  242 |       latitude: e.target.getLatLng().lat,
  243 |       longitude: e.target.getLatLng().lng,
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptScopeHandler.checkRedeclarationInScope (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1646:19)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1612:12)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4909:11)
    at TypeScriptParserMixin.declareNameFromIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7594:16)
    at TypeScriptParserMixin.checkIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7590:12)
    at TypeScriptParserMixin.checkLVal (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7527:12)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13488:10)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseStatementListItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12823:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:61)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseBlock (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13373:10)
    at TypeScriptParserMixin.parseFunctionBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12174:24)
    at TypeScriptParserMixin.parseArrowExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12149:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11759:12)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11395:23)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4793:20)
    at TypeScriptParserMixin.parseExprSubscripts (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11145:23)
    at TypeScriptParserMixin.parseUpdate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11130:21)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11110:23)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9890:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10963:61)
    at TypeScriptParserMixin.parseExprOps (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10968:23)
    at TypeScriptParserMixin.parseMaybeConditional (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10945:23)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10895:21)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9839:20)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:39
    at TypeScriptParserMixin.allowInAnd (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12495:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:17)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13460:91)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)

webpack compiled with 1 error and 1 warning
ERROR in src/components/MissionPlanner.tsx:204:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    202 |
    203 |   // Handle home location drag
  > 204 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    205 |     const newPosition: Position = {
    206 |       latitude: e.target.getLatLng().lat,
    207 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:240:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    238 |
    239 |   // Handle home location drag
  > 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    241 |     const newPosition: Position = {
    242 |       latitude: e.target.getLatLng().lat,
    243 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:277:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    275 |
    276 |   // Handle home marker drag
  > 277 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    278 |     const newPosition: Position = {
    279 |       latitude: e.target.getLatLng().lat,
    280 |       longitude: e.target.getLatLng().lng,

Compiling...
Failed to compile.

SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (240:8)
  238 |
  239 |   // Handle home location drag
> 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  241 |     const newPosition: Position = {
  242 |       latitude: e.target.getLatLng().lat,
  243 |       longitude: e.target.getLatLng().lng,
WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 240:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare
  Line 277:9:  'handleHomeDrag' is already defined  @typescript-eslint/no-redeclare

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Identifier 'handleHomeDrag' has already been declared. (240:8)

  238 |
  239 |   // Handle home location drag
> 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
      |         ^
  241 |     const newPosition: Position = {
  242 |       latitude: e.target.getLatLng().lat,
  243 |       longitude: e.target.getLatLng().lng,
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptScopeHandler.checkRedeclarationInScope (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1646:19)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:1612:12)
    at TypeScriptScopeHandler.declareName (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4909:11)
    at TypeScriptParserMixin.declareNameFromIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7594:16)
    at TypeScriptParserMixin.checkIdentifier (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7590:12)
    at TypeScriptParserMixin.checkLVal (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7527:12)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13488:10)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseStatementListItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12823:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:61)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseBlock (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13373:10)
    at TypeScriptParserMixin.parseFunctionBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12174:24)
    at TypeScriptParserMixin.parseArrowExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12149:10)
    at TypeScriptParserMixin.parseParenAndDistinguishExpression (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11759:12)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11395:23)
    at TypeScriptParserMixin.parseExprAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:4793:20)
    at TypeScriptParserMixin.parseExprSubscripts (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11145:23)
    at TypeScriptParserMixin.parseUpdate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11130:21)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:11110:23)
    at TypeScriptParserMixin.parseMaybeUnary (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9890:18)
    at TypeScriptParserMixin.parseMaybeUnaryOrPrivate (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10963:61)
    at TypeScriptParserMixin.parseExprOps (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10968:23)
    at TypeScriptParserMixin.parseMaybeConditional (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10945:23)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10895:21)
    at TypeScriptParserMixin.parseMaybeAssign (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9839:20)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:39
    at TypeScriptParserMixin.allowInAnd (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12495:16)
    at TypeScriptParserMixin.parseMaybeAssignAllowIn (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10864:17)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13460:91)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)

webpack compiled with 1 error and 1 warning
ERROR in src/components/MissionPlanner.tsx:204:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    202 |
    203 |   // Handle home location drag
  > 204 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    205 |     const newPosition: Position = {
    206 |       latitude: e.target.getLatLng().lat,
    207 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:240:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    238 |
    239 |   // Handle home location drag
  > 240 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    241 |     const newPosition: Position = {
    242 |       latitude: e.target.getLatLng().lat,
    243 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:277:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    275 |
    276 |   // Handle home marker drag
  > 277 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    278 |     const newPosition: Position = {
    279 |       latitude: e.target.getLatLng().lat,
    280 |       longitude: e.target.getLatLng().lng,

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/DraggableWaypoint.tsx:54:7
TS2300: Duplicate identifier 'dragend'.
    52 |         // Optional: Add real-time visual feedback during drag
    53 |       },
  > 54 |       dragend() {
       |       ^^^^^^^
    55 |         // Reset opacity and handle position update
    56 |         const marker = markerRef.current;
    57 |         if (marker) {

ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/DraggableWaypoint.tsx:54:7
TS2300: Duplicate identifier 'dragend'.
    52 |         // Optional: Add real-time visual feedback during drag
    53 |       },
  > 54 |       dragend() {
       |       ^^^^^^^
    55 |         // Reset opacity and handle position update
    56 |         const marker = markerRef.current;
    57 |         if (marker) {

ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (209:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (209:11)

  207 |
  208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 209 |   }, [state.currentPlan]);
      |            ^
  210 |
  211 |   // Delete a waypoint
  212 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 209:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:59:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:203:19
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:203:40
TS2304: Cannot find name 'updatedWaypoint'.
    201 |       ...state.currentPlan,
    202 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 203 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    204 |       ),
    205 |       updatedAt: new Date().toISOString()
    206 |     };

ERROR in src/components/MissionPlanner.tsx:209:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |       ^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:12
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |            ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:209:25
TS1005: ',' expected.
    207 |
    208 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 209 |   }, [state.currentPlan]);
        |                         ^
    210 |
    211 |   // Delete a waypoint
    212 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:217:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    215 |     const updatedPlan = {
    216 |       ...state.currentPlan,
  > 217 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    218 |       updatedAt: new Date().toISOString()
    219 |     };
    220 |

ERROR in src/components/MissionPlanner.tsx:221:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |     ^^^^^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:221:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    219 |     };
    220 |
  > 221 |     setState(prev => ({ 
        |              ^^^^
    222 |       ...prev, 
    223 |       currentPlan: updatedPlan,
    224 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:229:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    227 |
    228 |   // Handle home location drag
  > 229 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    230 |     const newPosition: Position = {
    231 |       latitude: e.target.getLatLng().lat,
    232 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:236:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |     ^^^^^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:236:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    234 |     };
    235 |
  > 236 |     setState(prev => ({
        |              ^^^^
    237 |       ...prev,
    238 |       homeLocation: newPosition,
    239 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:245:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    243 |     // Update current mission home location and HOME waypoint
    244 |     if (state.currentPlan) {
  > 245 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    246 |         wp.id === 'home' 
    247 |           ? { ...wp, position: newPosition }
    248 |           : wp

ERROR in src/components/MissionPlanner.tsx:260:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:260:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    258 |       };
    259 |
  > 260 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    261 |     }
    262 |   }, [state.homeLocation.altitude, state.currentPlan]);
    263 |

ERROR in src/components/MissionPlanner.tsx:265:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    263 |
    264 |   // Handle home location drag
  > 265 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    266 |     const newPosition: Position = {
    267 |       latitude: e.target.getLatLng().lat,
    268 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:272:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |     ^^^^^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:272:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    270 |     };
    271 |
  > 272 |     setState(prev => ({
        |              ^^^^
    273 |       ...prev,
    274 |       homeLocation: newPosition,
    275 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:280:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    278 |     // Update current mission home location and HOME waypoint
    279 |     if (state.currentPlan) {
  > 280 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    281 |         wp.id === 'home' 
    282 |           ? { ...wp, position: newPosition }
    283 |           : wp

ERROR in src/components/MissionPlanner.tsx:295:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:295:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    293 |       };
    294 |
  > 295 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    296 |     }
    297 |
    298 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:302:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    300 |
    301 |   // Handle home marker drag
  > 302 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    303 |     const newPosition: Position = {
    304 |       latitude: e.target.getLatLng().lat,
    305 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:310:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |     ^^^^^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:310:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    308 |
    309 |     // Update home location state
  > 310 |     setState(prev => ({
        |              ^^^^
    311 |       ...prev,
    312 |       homeLocation: newPosition,
    313 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:324:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    322 |         lat0: newPosition.latitude,
    323 |         lon0: newPosition.longitude,
  > 324 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    325 |           wp.id === 'home' 
    326 |             ? { ...wp, position: newPosition }
    327 |             : wp

ERROR in src/components/MissionPlanner.tsx:332:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:332:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    330 |       };
    331 |
  > 332 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    333 |     }
    334 |
    335 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:340:10
TS2304: Cannot find name 'homeLocationInput'.
    338 |   // Handle home location input (zipcode, address, or coordinates)
    339 |   const handleHomeLocationSubmit = async () => {
  > 340 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    341 |
    342 |     setIsGeocodingHome(true);
    343 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    340 |     if (!homeLocationInput.trim()) return;
    341 |
  > 342 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    343 |     setGeocodingError('');
    344 |
    345 |     try {

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setGeocodingError'.
    341 |
    342 |     setIsGeocodingHome(true);
  > 343 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    344 |
    345 |     try {
    346 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:349:11
TS2304: Cannot find name 'homeLocationInput'.
    347 |
    348 |       // Check if input looks like coordinates
  > 349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    350 |         result = geocodingService.parseCoordinates(homeLocationInput);
    351 |       } 
    352 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:350:18
TS2304: Cannot find name 'geocodingService'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:350:52
TS2304: Cannot find name 'homeLocationInput'.
    348 |       // Check if input looks like coordinates
    349 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 350 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    351 |       } 
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:353:16
TS2304: Cannot find name 'homeLocationInput'.
    351 |       } 
    352 |       // Check if input looks like a US zipcode
  > 353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    355 |       }
    356 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:354:24
TS2304: Cannot find name 'geocodingService'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:354:56
TS2304: Cannot find name 'homeLocationInput'.
    352 |       // Check if input looks like a US zipcode
    353 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 354 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    355 |       }
    356 |       // Otherwise treat as address
    357 |       else {

ERROR in src/components/MissionPlanner.tsx:358:24
TS2304: Cannot find name 'geocodingService'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:358:56
TS2304: Cannot find name 'homeLocationInput'.
    356 |       // Otherwise treat as address
    357 |       else {
  > 358 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    359 |       }
    360 |
    361 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:362:9
TS2304: Cannot find name 'setState'.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |         ^^^^^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:362:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    360 |
    361 |       if (result.success && result.position) {
  > 362 |         setState(prev => ({
        |                  ^^^^
    363 |           ...prev,
    364 |           homeLocation: result.position!,
    365 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:376:11
TS2304: Cannot find name 'setState'.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:376:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    374 |             updatedAt: new Date().toISOString()
    375 |           };
  > 376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    377 |         } else {
    378 |           createNewMission(result.position!);
    379 |         }

ERROR in src/components/MissionPlanner.tsx:378:11
TS2304: Cannot find name 'createNewMission'.
    376 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    377 |         } else {
  > 378 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    379 |         }
    380 |
    381 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:381:9
TS2304: Cannot find name 'setHomeLocationInput'.
    379 |         }
    380 |
  > 381 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
    384 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:384:9
TS2304: Cannot find name 'setGeocodingError'.
    382 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    383 |       } else {
  > 384 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    385 |       }
    386 |     } catch (error) {
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:387:7
TS2304: Cannot find name 'setGeocodingError'.
    385 |       }
    386 |     } catch (error) {
  > 387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    388 |     } finally {
    389 |       setIsGeocodingHome(false);
    390 |     }

ERROR in src/components/MissionPlanner.tsx:389:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    387 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    388 |     } finally {
  > 389 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    390 |     }
    391 |   };
    392 |

ERROR in src/components/MissionPlanner.tsx:421:9
TS2304: Cannot find name 'setState'.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |         ^^^^^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:421:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    419 |         };
    420 |
  > 421 |         setState(prev => ({
        |                  ^^^^
    422 |           ...prev,
    423 |           currentPlan: updatedPlan,
    424 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:444:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    442 |   // Generate waypoint path for visualization
    443 |   const waypointPath = state.currentPlan?.waypoints
  > 444 |     .filter(wp => wp.id !== 'home')
        |             ^^
    445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    446 |
    447 |   return (

ERROR in src/components/MissionPlanner.tsx:445:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   const waypointPath = state.currentPlan?.waypoints
    444 |     .filter(wp => wp.id !== 'home')
  > 445 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    446 |
    447 |   return (
    448 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:677:1
TS1128: Declaration or statement expected.
    675 |     </div>
    676 |   );
  > 677 | };
        | ^
    678 |
    679 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:230:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    228 |
    229 |   // Handle home location drag
  > 230 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    231 |     const newPosition: Position = {
    232 |       latitude: e.target.getLatLng().lat,
    233 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:237:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    235 |     };
    236 |
  > 237 |     setState(prev => ({
        |     ^^^^^^^^
    238 |       ...prev,
    239 |       homeLocation: newPosition,
    240 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:237:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    235 |     };
    236 |
  > 237 |     setState(prev => ({
        |              ^^^^
    238 |       ...prev,
    239 |       homeLocation: newPosition,
    240 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:246:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    244 |     // Update current mission home location and HOME waypoint
    245 |     if (state.currentPlan) {
  > 246 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    247 |         wp.id === 'home' 
    248 |           ? { ...wp, position: newPosition }
    249 |           : wp

ERROR in src/components/MissionPlanner.tsx:261:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    259 |       };
    260 |
  > 261 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    262 |     }
    263 |   }, [state.homeLocation.altitude, state.currentPlan]);
    264 |

ERROR in src/components/MissionPlanner.tsx:261:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    259 |       };
    260 |
  > 261 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    262 |     }
    263 |   }, [state.homeLocation.altitude, state.currentPlan]);
    264 |

ERROR in src/components/MissionPlanner.tsx:266:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    264 |
    265 |   // Handle home location drag
  > 266 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    267 |     const newPosition: Position = {
    268 |       latitude: e.target.getLatLng().lat,
    269 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:273:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    271 |     };
    272 |
  > 273 |     setState(prev => ({
        |     ^^^^^^^^
    274 |       ...prev,
    275 |       homeLocation: newPosition,
    276 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:273:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    271 |     };
    272 |
  > 273 |     setState(prev => ({
        |              ^^^^
    274 |       ...prev,
    275 |       homeLocation: newPosition,
    276 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:281:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    279 |     // Update current mission home location and HOME waypoint
    280 |     if (state.currentPlan) {
  > 281 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    282 |         wp.id === 'home' 
    283 |           ? { ...wp, position: newPosition }
    284 |           : wp

ERROR in src/components/MissionPlanner.tsx:296:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    294 |       };
    295 |
  > 296 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    297 |     }
    298 |
    299 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:296:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    294 |       };
    295 |
  > 296 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    297 |     }
    298 |
    299 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:303:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    301 |
    302 |   // Handle home marker drag
  > 303 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    304 |     const newPosition: Position = {
    305 |       latitude: e.target.getLatLng().lat,
    306 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:311:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    309 |
    310 |     // Update home location state
  > 311 |     setState(prev => ({
        |     ^^^^^^^^
    312 |       ...prev,
    313 |       homeLocation: newPosition,
    314 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:311:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    309 |
    310 |     // Update home location state
  > 311 |     setState(prev => ({
        |              ^^^^
    312 |       ...prev,
    313 |       homeLocation: newPosition,
    314 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:325:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    323 |         lat0: newPosition.latitude,
    324 |         lon0: newPosition.longitude,
  > 325 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    326 |           wp.id === 'home' 
    327 |             ? { ...wp, position: newPosition }
    328 |             : wp

ERROR in src/components/MissionPlanner.tsx:333:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    331 |       };
    332 |
  > 333 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    334 |     }
    335 |
    336 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:333:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    331 |       };
    332 |
  > 333 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    334 |     }
    335 |
    336 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:341:10
TS2304: Cannot find name 'homeLocationInput'.
    339 |   // Handle home location input (zipcode, address, or coordinates)
    340 |   const handleHomeLocationSubmit = async () => {
  > 341 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    342 |
    343 |     setIsGeocodingHome(true);
    344 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    341 |     if (!homeLocationInput.trim()) return;
    342 |
  > 343 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    344 |     setGeocodingError('');
    345 |
    346 |     try {

ERROR in src/components/MissionPlanner.tsx:344:5
TS2304: Cannot find name 'setGeocodingError'.
    342 |
    343 |     setIsGeocodingHome(true);
  > 344 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    345 |
    346 |     try {
    347 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:350:11
TS2304: Cannot find name 'homeLocationInput'.
    348 |
    349 |       // Check if input looks like coordinates
  > 350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    351 |         result = geocodingService.parseCoordinates(homeLocationInput);
    352 |       } 
    353 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:351:18
TS2304: Cannot find name 'geocodingService'.
    349 |       // Check if input looks like coordinates
    350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 351 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    352 |       } 
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:351:52
TS2304: Cannot find name 'homeLocationInput'.
    349 |       // Check if input looks like coordinates
    350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 351 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    352 |       } 
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:354:16
TS2304: Cannot find name 'homeLocationInput'.
    352 |       } 
    353 |       // Check if input looks like a US zipcode
  > 354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    356 |       }
    357 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:355:24
TS2304: Cannot find name 'geocodingService'.
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    356 |       }
    357 |       // Otherwise treat as address
    358 |       else {

ERROR in src/components/MissionPlanner.tsx:355:56
TS2304: Cannot find name 'homeLocationInput'.
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    356 |       }
    357 |       // Otherwise treat as address
    358 |       else {

ERROR in src/components/MissionPlanner.tsx:359:24
TS2304: Cannot find name 'geocodingService'.
    357 |       // Otherwise treat as address
    358 |       else {
  > 359 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    360 |       }
    361 |
    362 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:359:56
TS2304: Cannot find name 'homeLocationInput'.
    357 |       // Otherwise treat as address
    358 |       else {
  > 359 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    360 |       }
    361 |
    362 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:363:9
TS2304: Cannot find name 'setState'.
    361 |
    362 |       if (result.success && result.position) {
  > 363 |         setState(prev => ({
        |         ^^^^^^^^
    364 |           ...prev,
    365 |           homeLocation: result.position!,
    366 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:363:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    361 |
    362 |       if (result.success && result.position) {
  > 363 |         setState(prev => ({
        |                  ^^^^
    364 |           ...prev,
    365 |           homeLocation: result.position!,
    366 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:377:11
TS2304: Cannot find name 'setState'.
    375 |             updatedAt: new Date().toISOString()
    376 |           };
  > 377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    378 |         } else {
    379 |           createNewMission(result.position!);
    380 |         }

ERROR in src/components/MissionPlanner.tsx:377:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    375 |             updatedAt: new Date().toISOString()
    376 |           };
  > 377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    378 |         } else {
    379 |           createNewMission(result.position!);
    380 |         }

ERROR in src/components/MissionPlanner.tsx:379:11
TS2304: Cannot find name 'createNewMission'.
    377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    378 |         } else {
  > 379 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    380 |         }
    381 |
    382 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:382:9
TS2304: Cannot find name 'setHomeLocationInput'.
    380 |         }
    381 |
  > 382 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    383 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    384 |       } else {
    385 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:385:9
TS2304: Cannot find name 'setGeocodingError'.
    383 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    384 |       } else {
  > 385 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    386 |       }
    387 |     } catch (error) {
    388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:388:7
TS2304: Cannot find name 'setGeocodingError'.
    386 |       }
    387 |     } catch (error) {
  > 388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    389 |     } finally {
    390 |       setIsGeocodingHome(false);
    391 |     }

ERROR in src/components/MissionPlanner.tsx:390:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    389 |     } finally {
  > 390 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    391 |     }
    392 |   };
    393 |

ERROR in src/components/MissionPlanner.tsx:422:9
TS2304: Cannot find name 'setState'.
    420 |         };
    421 |
  > 422 |         setState(prev => ({
        |         ^^^^^^^^
    423 |           ...prev,
    424 |           currentPlan: updatedPlan,
    425 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:422:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    420 |         };
    421 |
  > 422 |         setState(prev => ({
        |                  ^^^^
    423 |           ...prev,
    424 |           currentPlan: updatedPlan,
    425 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:445:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   // Generate waypoint path for visualization
    444 |   const waypointPath = state.currentPlan?.waypoints
  > 445 |     .filter(wp => wp.id !== 'home')
        |             ^^
    446 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    447 |
    448 |   return (

ERROR in src/components/MissionPlanner.tsx:446:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    444 |   const waypointPath = state.currentPlan?.waypoints
    445 |     .filter(wp => wp.id !== 'home')
  > 446 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    447 |
    448 |   return (
    449 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:678:1
TS1128: Declaration or statement expected.
    676 |     </div>
    677 |   );
  > 678 | };
        | ^
    679 |
    680 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:230:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    228 |
    229 |   // Handle home location drag
  > 230 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    231 |     const newPosition: Position = {
    232 |       latitude: e.target.getLatLng().lat,
    233 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:237:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    235 |     };
    236 |
  > 237 |     setState(prev => ({
        |     ^^^^^^^^
    238 |       ...prev,
    239 |       homeLocation: newPosition,
    240 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:237:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    235 |     };
    236 |
  > 237 |     setState(prev => ({
        |              ^^^^
    238 |       ...prev,
    239 |       homeLocation: newPosition,
    240 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:246:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    244 |     // Update current mission home location and HOME waypoint
    245 |     if (state.currentPlan) {
  > 246 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    247 |         wp.id === 'home' 
    248 |           ? { ...wp, position: newPosition }
    249 |           : wp

ERROR in src/components/MissionPlanner.tsx:261:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    259 |       };
    260 |
  > 261 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    262 |     }
    263 |   }, [state.homeLocation.altitude, state.currentPlan]);
    264 |

ERROR in src/components/MissionPlanner.tsx:261:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    259 |       };
    260 |
  > 261 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    262 |     }
    263 |   }, [state.homeLocation.altitude, state.currentPlan]);
    264 |

ERROR in src/components/MissionPlanner.tsx:266:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    264 |
    265 |   // Handle home location drag
  > 266 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    267 |     const newPosition: Position = {
    268 |       latitude: e.target.getLatLng().lat,
    269 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:273:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    271 |     };
    272 |
  > 273 |     setState(prev => ({
        |     ^^^^^^^^
    274 |       ...prev,
    275 |       homeLocation: newPosition,
    276 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:273:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    271 |     };
    272 |
  > 273 |     setState(prev => ({
        |              ^^^^
    274 |       ...prev,
    275 |       homeLocation: newPosition,
    276 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:281:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    279 |     // Update current mission home location and HOME waypoint
    280 |     if (state.currentPlan) {
  > 281 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    282 |         wp.id === 'home' 
    283 |           ? { ...wp, position: newPosition }
    284 |           : wp

ERROR in src/components/MissionPlanner.tsx:296:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    294 |       };
    295 |
  > 296 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    297 |     }
    298 |
    299 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:296:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    294 |       };
    295 |
  > 296 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    297 |     }
    298 |
    299 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:303:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    301 |
    302 |   // Handle home marker drag
  > 303 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    304 |     const newPosition: Position = {
    305 |       latitude: e.target.getLatLng().lat,
    306 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:311:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    309 |
    310 |     // Update home location state
  > 311 |     setState(prev => ({
        |     ^^^^^^^^
    312 |       ...prev,
    313 |       homeLocation: newPosition,
    314 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:311:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    309 |
    310 |     // Update home location state
  > 311 |     setState(prev => ({
        |              ^^^^
    312 |       ...prev,
    313 |       homeLocation: newPosition,
    314 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:325:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    323 |         lat0: newPosition.latitude,
    324 |         lon0: newPosition.longitude,
  > 325 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    326 |           wp.id === 'home' 
    327 |             ? { ...wp, position: newPosition }
    328 |             : wp

ERROR in src/components/MissionPlanner.tsx:333:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    331 |       };
    332 |
  > 333 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    334 |     }
    335 |
    336 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:333:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    331 |       };
    332 |
  > 333 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    334 |     }
    335 |
    336 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:341:10
TS2304: Cannot find name 'homeLocationInput'.
    339 |   // Handle home location input (zipcode, address, or coordinates)
    340 |   const handleHomeLocationSubmit = async () => {
  > 341 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    342 |
    343 |     setIsGeocodingHome(true);
    344 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:343:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    341 |     if (!homeLocationInput.trim()) return;
    342 |
  > 343 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    344 |     setGeocodingError('');
    345 |
    346 |     try {

ERROR in src/components/MissionPlanner.tsx:344:5
TS2304: Cannot find name 'setGeocodingError'.
    342 |
    343 |     setIsGeocodingHome(true);
  > 344 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    345 |
    346 |     try {
    347 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:350:11
TS2304: Cannot find name 'homeLocationInput'.
    348 |
    349 |       // Check if input looks like coordinates
  > 350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    351 |         result = geocodingService.parseCoordinates(homeLocationInput);
    352 |       } 
    353 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:351:18
TS2304: Cannot find name 'geocodingService'.
    349 |       // Check if input looks like coordinates
    350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 351 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    352 |       } 
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:351:52
TS2304: Cannot find name 'homeLocationInput'.
    349 |       // Check if input looks like coordinates
    350 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 351 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    352 |       } 
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:354:16
TS2304: Cannot find name 'homeLocationInput'.
    352 |       } 
    353 |       // Check if input looks like a US zipcode
  > 354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    356 |       }
    357 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:355:24
TS2304: Cannot find name 'geocodingService'.
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    356 |       }
    357 |       // Otherwise treat as address
    358 |       else {

ERROR in src/components/MissionPlanner.tsx:355:56
TS2304: Cannot find name 'homeLocationInput'.
    353 |       // Check if input looks like a US zipcode
    354 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 355 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    356 |       }
    357 |       // Otherwise treat as address
    358 |       else {

ERROR in src/components/MissionPlanner.tsx:359:24
TS2304: Cannot find name 'geocodingService'.
    357 |       // Otherwise treat as address
    358 |       else {
  > 359 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    360 |       }
    361 |
    362 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:359:56
TS2304: Cannot find name 'homeLocationInput'.
    357 |       // Otherwise treat as address
    358 |       else {
  > 359 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    360 |       }
    361 |
    362 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:363:9
TS2304: Cannot find name 'setState'.
    361 |
    362 |       if (result.success && result.position) {
  > 363 |         setState(prev => ({
        |         ^^^^^^^^
    364 |           ...prev,
    365 |           homeLocation: result.position!,
    366 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:363:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    361 |
    362 |       if (result.success && result.position) {
  > 363 |         setState(prev => ({
        |                  ^^^^
    364 |           ...prev,
    365 |           homeLocation: result.position!,
    366 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:377:11
TS2304: Cannot find name 'setState'.
    375 |             updatedAt: new Date().toISOString()
    376 |           };
  > 377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    378 |         } else {
    379 |           createNewMission(result.position!);
    380 |         }

ERROR in src/components/MissionPlanner.tsx:377:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    375 |             updatedAt: new Date().toISOString()
    376 |           };
  > 377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    378 |         } else {
    379 |           createNewMission(result.position!);
    380 |         }

ERROR in src/components/MissionPlanner.tsx:379:11
TS2304: Cannot find name 'createNewMission'.
    377 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    378 |         } else {
  > 379 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    380 |         }
    381 |
    382 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:382:9
TS2304: Cannot find name 'setHomeLocationInput'.
    380 |         }
    381 |
  > 382 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    383 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    384 |       } else {
    385 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:385:9
TS2304: Cannot find name 'setGeocodingError'.
    383 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    384 |       } else {
  > 385 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    386 |       }
    387 |     } catch (error) {
    388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:388:7
TS2304: Cannot find name 'setGeocodingError'.
    386 |       }
    387 |     } catch (error) {
  > 388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    389 |     } finally {
    390 |       setIsGeocodingHome(false);
    391 |     }

ERROR in src/components/MissionPlanner.tsx:390:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    388 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    389 |     } finally {
  > 390 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    391 |     }
    392 |   };
    393 |

ERROR in src/components/MissionPlanner.tsx:422:9
TS2304: Cannot find name 'setState'.
    420 |         };
    421 |
  > 422 |         setState(prev => ({
        |         ^^^^^^^^
    423 |           ...prev,
    424 |           currentPlan: updatedPlan,
    425 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:422:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    420 |         };
    421 |
  > 422 |         setState(prev => ({
        |                  ^^^^
    423 |           ...prev,
    424 |           currentPlan: updatedPlan,
    425 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:445:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    443 |   // Generate waypoint path for visualization
    444 |   const waypointPath = state.currentPlan?.waypoints
  > 445 |     .filter(wp => wp.id !== 'home')
        |             ^^
    446 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    447 |
    448 |   return (

ERROR in src/components/MissionPlanner.tsx:446:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    444 |   const waypointPath = state.currentPlan?.waypoints
    445 |     .filter(wp => wp.id !== 'home')
  > 446 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    447 |
    448 |   return (
    449 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:678:1
TS1128: Declaration or statement expected.
    676 |     </div>
    677 |   );
  > 678 | };
        | ^
    679 |
    680 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

ERROR in src/components/MissionPlannerClean.tsx:228:19
TS2339: Property 'lat0' does not exist on type '{ waypoints: Waypoint[]; updatedAt: string; id: string; name: string; home: Position; max_dist_from_home: number; ground_alt: number; security_height: number; alt: number; ... 6 more ...; description?: string | undefined; }'.
    226 |     if (waypointId === 'home') {
    227 |       updatedPlan.home = newPosition;
  > 228 |       updatedPlan.lat0 = newPosition.latitude;
        |                   ^^^^
    229 |       updatedPlan.lon0 = newPosition.longitude;
    230 |       
    231 |       setState(prev => ({

ERROR in src/components/MissionPlannerClean.tsx:229:19
TS2339: Property 'lon0' does not exist on type '{ waypoints: Waypoint[]; updatedAt: string; id: string; name: string; home: Position; max_dist_from_home: number; ground_alt: number; security_height: number; alt: number; ... 6 more ...; description?: string | undefined; }'.
    227 |       updatedPlan.home = newPosition;
    228 |       updatedPlan.lat0 = newPosition.latitude;
  > 229 |       updatedPlan.lon0 = newPosition.longitude;
        |                   ^^^^
    230 |       
    231 |       setState(prev => ({
    232 |         ...prev,

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

ERROR in src/components/MissionPlannerClean.tsx:228:19
TS2339: Property 'lat0' does not exist on type '{ waypoints: Waypoint[]; updatedAt: string; id: string; name: string; home: Position; max_dist_from_home: number; ground_alt: number; security_height: number; alt: number; ... 6 more ...; description?: string | undefined; }'.
    226 |     if (waypointId === 'home') {
    227 |       updatedPlan.home = newPosition;
  > 228 |       updatedPlan.lat0 = newPosition.latitude;
        |                   ^^^^
    229 |       updatedPlan.lon0 = newPosition.longitude;
    230 |       
    231 |       setState(prev => ({

ERROR in src/components/MissionPlannerClean.tsx:229:19
TS2339: Property 'lon0' does not exist on type '{ waypoints: Waypoint[]; updatedAt: string; id: string; name: string; home: Position; max_dist_from_home: number; ground_alt: number; security_height: number; alt: number; ... 6 more ...; description?: string | undefined; }'.
    227 |       updatedPlan.home = newPosition;
    228 |       updatedPlan.lat0 = newPosition.latitude;
  > 229 |       updatedPlan.lon0 = newPosition.longitude;
        |                   ^^^^
    230 |       
    231 |       setState(prev => ({
    232 |         ...prev,

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Failed to compile.

[eslint] 
src/components/MissionPlanner.tsx
Syntax error: ',' expected (210:11)
WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

ERROR in ./src/components/MissionPlanner.tsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: /Users/david/Documents/bmw330ipaparazzi/src/gcs/src/components/MissionPlanner.tsx: Unexpected token, expected "," (210:11)

  208 |
  209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
> 210 |   }, [state.currentPlan]);
      |            ^
  211 |
  212 |   // Delete a waypoint
  213 |   const deleteWaypoint = useCallback((waypointId: string) => {
    at constructor (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:367:19)
    at TypeScriptParserMixin.raise (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6624:19)
    at TypeScriptParserMixin.unexpected (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6644:16)
    at TypeScriptParserMixin.expect (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:6924:12)
    at TypeScriptParserMixin.parseBindingList (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7393:14)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:7375:32)
    at TypeScriptParserMixin.parseBindingAtom (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9995:18)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13478:21)
    at TypeScriptParserMixin.parseVarId (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9805:11)
    at TypeScriptParserMixin.parseVar (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13459:12)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13306:10)
    at TypeScriptParserMixin.parseVarStatement (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9469:31)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12927:23)
    at TypeScriptParserMixin.parseStatementContent (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:9569:18)
    at TypeScriptParserMixin.parseStatementLike (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12843:17)
    at TypeScriptParserMixin.parseModuleItem (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12820:17)
    at TypeScriptParserMixin.parseBlockOrModuleBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13392:36)
    at TypeScriptParserMixin.parseBlockBody (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:13385:10)
    at TypeScriptParserMixin.parseProgram (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12698:10)
    at TypeScriptParserMixin.parseTopLevel (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:12688:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14568:25)
    at TypeScriptParserMixin.parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:10183:18)
    at parse (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/parser/lib/index.js:14602:38)
    at parser (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/parser/index.js:41:34)
    at parser.next (<anonymous>)
    at normalizeFile (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/normalize-file.js:64:37)
    at normalizeFile.next (<anonymous>)
    at run (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transformation/index.js:22:50)
    at run.next (<anonymous>)
    at transform (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/@babel/core/lib/transform.js:22:33)
    at transform.next (<anonymous>)
    at step (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:261:32)
    at /Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:273:13
    at async.call.result.err.err (/Users/david/Documents/bmw330ipaparazzi/src/gcs/node_modules/gensync/index.js:223:11)

ERROR in [eslint] 
src/components/MissionPlanner.tsx
  Line 210:11:  Parsing error: ',' expected

webpack compiled with 2 errors and 1 warning
ERROR in src/components/MissionPlanner.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlanner.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlanner.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlanner.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlanner.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlanner.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlanner.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlanner.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlanner.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlanner.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlanner.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlanner.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlanner.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlanner.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlanner.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlanner.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlanner.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlanner.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlanner.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlanner.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlanner.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlanner.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlanner.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlanner.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlanner.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlanner.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlanner.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlanner.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlanner.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlanner.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlanner.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlanner.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlanner.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlanner.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:97:13
TS2322: Type '{ id: string; name: string; home: { latitude: number; longitude: number; altitude: number; heading?: number | undefined; }; lat0: number; lon0: number; qnh: number; geo_mag: number; createdAt: string; ... 15 more ...; description?: string | undefined; }' is not assignable to type 'FlightPlan'.
  Object literal may only specify known properties, and 'lat0' does not exist in type 'FlightPlan'.
     95 |             name: 'New Mission',
     96 |             home: location.position,
  >  97 |             lat0: location.position.latitude,
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     98 |             lon0: location.position.longitude,
     99 |             qnh: 1013.25,
    100 |             geo_mag: 0,

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:97:13
TS2322: Type '{ id: string; name: string; home: { latitude: number; longitude: number; altitude: number; heading?: number | undefined; }; lat0: number; lon0: number; qnh: number; geo_mag: number; createdAt: string; ... 15 more ...; description?: string | undefined; }' is not assignable to type 'FlightPlan'.
  Object literal may only specify known properties, and 'lat0' does not exist in type 'FlightPlan'.
     95 |             name: 'New Mission',
     96 |             home: location.position,
  >  97 |             lat0: location.position.latitude,
        |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     98 |             lon0: location.position.longitude,
     99 |             qnh: 1013.25,
    100 |             geo_mag: 0,

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:97:13
TS2322: Type '{ id: string; name: string; home: { latitude: number; longitude: number; altitude: number; heading?: number | undefined; }; qnh: number; geo_mag: number; createdAt: string; updatedAt: string; waypoints: { ...; }[]; ... 13 more ...; description?: string | undefined; }' is not assignable to type 'FlightPlan'.
  Object literal may only specify known properties, and 'qnh' does not exist in type 'FlightPlan'.
     95 |             name: 'New Mission',
     96 |             home: location.position,
  >  97 |             qnh: 1013.25,
        |             ^^^^^^^^^^^^
     98 |             geo_mag: 0,
     99 |             createdAt: new Date().toISOString(),
    100 |             updatedAt: new Date().toISOString(),

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:97:13
TS2322: Type '{ id: string; name: string; home: { latitude: number; longitude: number; altitude: number; heading?: number | undefined; }; qnh: number; geo_mag: number; createdAt: string; updatedAt: string; waypoints: { ...; }[]; ... 13 more ...; description?: string | undefined; }' is not assignable to type 'FlightPlan'.
  Object literal may only specify known properties, and 'qnh' does not exist in type 'FlightPlan'.
     95 |             name: 'New Mission',
     96 |             home: location.position,
  >  97 |             qnh: 1013.25,
        |             ^^^^^^^^^^^^
     98 |             geo_mag: 0,
     99 |             createdAt: new Date().toISOString(),
    100 |             updatedAt: new Date().toISOString(),

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 17:10:  'DEFAULT_FLIGHT_PLAN' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 17:10:  'DEFAULT_FLIGHT_PLAN' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/components/MissionPlanner.tsx
  Line 17:10:  'DEFAULT_FLIGHT_PLAN' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/components/MissionPlanner.tsx
  Line 17:10:  'DEFAULT_FLIGHT_PLAN' is defined but never used  @typescript-eslint/no-unused-vars

src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:59:72
TS2503: Cannot find namespace 'JSX'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }): JSX.Element => {
       |                                                                        ^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlanner.tsx:59:72
TS2503: Cannot find namespace 'JSX'.
    57 | }
    58 |
  > 59 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }): JSX.Element => {
       |                                                                        ^^^
    60 |   const [state, setState] = useState<MissionPlannerState>({
    61 |     currentPlan: null,
    62 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

Compiling...
Compiled with warnings.

[eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

WARNING in [eslint] 
src/services/GeocodingService.ts
  Line 6:40:  'ZipcodeLocation' is defined but never used  @typescript-eslint/no-unused-vars

webpack compiled with 1 warning
ERROR in src/components/MissionPlannerOld.tsx:60:7
TS2322: Type '({ className }: MissionPlannerProps) => void' is not assignable to type 'FC<MissionPlannerProps>'.
  Type 'void' is not assignable to type 'ReactElement<any, any> | null'.
    58 | }
    59 |
  > 60 | const MissionPlanner: React.FC<MissionPlannerProps> = ({ className }) => {
       |       ^^^^^^^^^^^^^^
    61 |   const [state, setState] = useState<MissionPlannerState>({
    62 |     currentPlan: null,
    63 |     homeLocation: { latitude: 48.8566, longitude: 2.3522, altitude: 0 },

ERROR in src/components/MissionPlannerOld.tsx:204:19
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                   ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:204:40
TS2304: Cannot find name 'updatedWaypoint'.
    202 |       ...state.currentPlan,
    203 |       waypoints: state.currentPlan.waypoints.map(wp => 
  > 204 |         wp.id === updatedWaypoint.id ? updatedWaypoint : wp
        |                                        ^^^^^^^^^^^^^^^
    205 |       ),
    206 |       updatedAt: new Date().toISOString()
    207 |     };

ERROR in src/components/MissionPlannerOld.tsx:210:7
TS7031: Binding element 'state' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |       ^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:12
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |            ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:13
TS7031: Binding element 'currentPlan' implicitly has an 'any' type.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |             ^^^^^^^^^^^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:210:25
TS1005: ',' expected.
    208 |
    209 |     setState(prev => ({ ...prev, currentPlan: updatedPlan }));
  > 210 |   }, [state.currentPlan]);
        |                         ^
    211 |
    212 |   // Delete a waypoint
    213 |   const deleteWaypoint = useCallback((waypointId: string) => {

ERROR in src/components/MissionPlannerOld.tsx:218:53
TS7006: Parameter 'wp' implicitly has an 'any' type.
    216 |     const updatedPlan = {
    217 |       ...state.currentPlan,
  > 218 |       waypoints: state.currentPlan.waypoints.filter(wp => wp.id !== waypointId),
        |                                                     ^^
    219 |       updatedAt: new Date().toISOString()
    220 |     };
    221 |

ERROR in src/components/MissionPlannerOld.tsx:222:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |     ^^^^^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:222:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    220 |     };
    221 |
  > 222 |     setState(prev => ({ 
        |              ^^^^
    223 |       ...prev, 
    224 |       currentPlan: updatedPlan,
    225 |       selectedWaypoint: null 

ERROR in src/components/MissionPlannerOld.tsx:233:62
TS7006: Parameter 'wp' implicitly has an 'any' type.
    231 |     if (!state.currentPlan) return;
    232 |
  > 233 |     const updatedWaypoints = state.currentPlan.waypoints.map(wp =>
        |                                                              ^^
    234 |       wp.id === waypointId ? { ...wp, position: newPosition } : wp
    235 |     );
    236 |

ERROR in src/components/MissionPlannerOld.tsx:249:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |       ^^^^^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:249:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    247 |       updatedPlan.lon0 = newPosition.longitude;
    248 |       
  > 249 |       setState(prev => ({
        |                ^^^^
    250 |         ...prev,
    251 |         currentPlan: updatedPlan,
    252 |         homeLocation: newPosition,

ERROR in src/components/MissionPlannerOld.tsx:256:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:256:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    254 |       }));
    255 |     } else {
  > 256 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    257 |     }
    258 |   }, [state.currentPlan]);
    259 |

ERROR in src/components/MissionPlannerOld.tsx:261:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    259 |
    260 |   // Handle home location drag
  > 261 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    262 |     const newPosition: Position = {
    263 |       latitude: e.target.getLatLng().lat,
    264 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:268:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |     ^^^^^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:268:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    266 |     };
    267 |
  > 268 |     setState(prev => ({
        |              ^^^^
    269 |       ...prev,
    270 |       homeLocation: newPosition,
    271 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:277:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    275 |     // Update current mission home location and HOME waypoint
    276 |     if (state.currentPlan) {
  > 277 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    278 |         wp.id === 'home' 
    279 |           ? { ...wp, position: newPosition }
    280 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:292:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:292:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    290 |       };
    291 |
  > 292 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    293 |     }
    294 |   }, [state.homeLocation.altitude, state.currentPlan]);
    295 |

ERROR in src/components/MissionPlannerOld.tsx:297:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    295 |
    296 |   // Handle home location drag
  > 297 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    298 |     const newPosition: Position = {
    299 |       latitude: e.target.getLatLng().lat,
    300 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:304:5
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |     ^^^^^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:304:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    302 |     };
    303 |
  > 304 |     setState(prev => ({
        |              ^^^^
    305 |       ...prev,
    306 |       homeLocation: newPosition,
    307 |       homeLocationSource: 'manual'

ERROR in src/components/MissionPlannerOld.tsx:312:64
TS7006: Parameter 'wp' implicitly has an 'any' type.
    310 |     // Update current mission home location and HOME waypoint
    311 |     if (state.currentPlan) {
  > 312 |       const updatedWaypoints = state.currentPlan.waypoints.map(wp => 
        |                                                                ^^
    313 |         wp.id === 'home' 
    314 |           ? { ...wp, position: newPosition }
    315 |           : wp

ERROR in src/components/MissionPlannerOld.tsx:327:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:327:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    325 |       };
    326 |
  > 327 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    328 |     }
    329 |
    330 |     console.log(`Home location moved to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:334:9
TS2451: Cannot redeclare block-scoped variable 'handleHomeDrag'.
    332 |
    333 |   // Handle home marker drag
  > 334 |   const handleHomeDrag = useCallback((e: L.DragEndEvent) => {
        |         ^^^^^^^^^^^^^^
    335 |     const newPosition: Position = {
    336 |       latitude: e.target.getLatLng().lat,
    337 |       longitude: e.target.getLatLng().lng,

ERROR in src/components/MissionPlannerOld.tsx:342:5
TS2304: Cannot find name 'setState'.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |     ^^^^^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:342:14
TS7006: Parameter 'prev' implicitly has an 'any' type.
    340 |
    341 |     // Update home location state
  > 342 |     setState(prev => ({
        |              ^^^^
    343 |       ...prev,
    344 |       homeLocation: newPosition,
    345 |       homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:356:52
TS7006: Parameter 'wp' implicitly has an 'any' type.
    354 |         lat0: newPosition.latitude,
    355 |         lon0: newPosition.longitude,
  > 356 |         waypoints: state.currentPlan.waypoints.map(wp => 
        |                                                    ^^
    357 |           wp.id === 'home' 
    358 |             ? { ...wp, position: newPosition }
    359 |             : wp

ERROR in src/components/MissionPlannerOld.tsx:364:7
TS2552: Cannot find name 'setState'. Did you mean 'useState'?
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |       ^^^^^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:364:16
TS7006: Parameter 'prev' implicitly has an 'any' type.
    362 |       };
    363 |
  > 364 |       setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                ^^^^
    365 |     }
    366 |
    367 |     console.log(`Home position updated to: ${newPosition.latitude.toFixed(6)}, ${newPosition.longitude.toFixed(6)}`);

ERROR in src/components/MissionPlannerOld.tsx:372:10
TS2304: Cannot find name 'homeLocationInput'.
    370 |   // Handle home location input (zipcode, address, or coordinates)
    371 |   const handleHomeLocationSubmit = async () => {
  > 372 |     if (!homeLocationInput.trim()) return;
        |          ^^^^^^^^^^^^^^^^^
    373 |
    374 |     setIsGeocodingHome(true);
    375 |     setGeocodingError('');

ERROR in src/components/MissionPlannerOld.tsx:374:5
TS2304: Cannot find name 'setIsGeocodingHome'.
    372 |     if (!homeLocationInput.trim()) return;
    373 |
  > 374 |     setIsGeocodingHome(true);
        |     ^^^^^^^^^^^^^^^^^^
    375 |     setGeocodingError('');
    376 |
    377 |     try {

ERROR in src/components/MissionPlannerOld.tsx:375:5
TS2304: Cannot find name 'setGeocodingError'.
    373 |
    374 |     setIsGeocodingHome(true);
  > 375 |     setGeocodingError('');
        |     ^^^^^^^^^^^^^^^^^
    376 |
    377 |     try {
    378 |       let result: GeocodeResult;

ERROR in src/components/MissionPlannerOld.tsx:381:11
TS2304: Cannot find name 'homeLocationInput'.
    379 |
    380 |       // Check if input looks like coordinates
  > 381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
        |           ^^^^^^^^^^^^^^^^^
    382 |         result = geocodingService.parseCoordinates(homeLocationInput);
    383 |       } 
    384 |       // Check if input looks like a US zipcode

ERROR in src/components/MissionPlannerOld.tsx:382:18
TS2304: Cannot find name 'geocodingService'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                  ^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:382:52
TS2304: Cannot find name 'homeLocationInput'.
    380 |       // Check if input looks like coordinates
    381 |       if (homeLocationInput.match(/^-?\d+\.?\d*[,\s]+-?\d+\.?\d*$/)) {
  > 382 |         result = geocodingService.parseCoordinates(homeLocationInput);
        |                                                    ^^^^^^^^^^^^^^^^^
    383 |       } 
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {

ERROR in src/components/MissionPlannerOld.tsx:385:16
TS2304: Cannot find name 'homeLocationInput'.
    383 |       } 
    384 |       // Check if input looks like a US zipcode
  > 385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
        |                ^^^^^^^^^^^^^^^^^
    386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
    387 |       }
    388 |       // Otherwise treat as address

ERROR in src/components/MissionPlannerOld.tsx:386:24
TS2304: Cannot find name 'geocodingService'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                        ^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:386:56
TS2304: Cannot find name 'homeLocationInput'.
    384 |       // Check if input looks like a US zipcode
    385 |       else if (homeLocationInput.match(/^\d{5}(-\d{4})?$/)) {
  > 386 |         result = await geocodingService.geocodeZipcode(homeLocationInput, 'US');
        |                                                        ^^^^^^^^^^^^^^^^^
    387 |       }
    388 |       // Otherwise treat as address
    389 |       else {

ERROR in src/components/MissionPlannerOld.tsx:390:24
TS2304: Cannot find name 'geocodingService'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                        ^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:390:56
TS2304: Cannot find name 'homeLocationInput'.
    388 |       // Otherwise treat as address
    389 |       else {
  > 390 |         result = await geocodingService.geocodeAddress(homeLocationInput);
        |                                                        ^^^^^^^^^^^^^^^^^
    391 |       }
    392 |
    393 |       if (result.success && result.position) {

ERROR in src/components/MissionPlannerOld.tsx:394:9
TS2304: Cannot find name 'setState'.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |         ^^^^^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:394:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    392 |
    393 |       if (result.success && result.position) {
  > 394 |         setState(prev => ({
        |                  ^^^^
    395 |           ...prev,
    396 |           homeLocation: result.position!,
    397 |           homeLocationSource: 'manual',

ERROR in src/components/MissionPlannerOld.tsx:408:11
TS2304: Cannot find name 'setState'.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |           ^^^^^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:408:20
TS7006: Parameter 'prev' implicitly has an 'any' type.
    406 |             updatedAt: new Date().toISOString()
    407 |           };
  > 408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
        |                    ^^^^
    409 |         } else {
    410 |           createNewMission(result.position!);
    411 |         }

ERROR in src/components/MissionPlannerOld.tsx:410:11
TS2304: Cannot find name 'createNewMission'.
    408 |           setState(prev => ({ ...prev, currentPlan: updatedPlan }));
    409 |         } else {
  > 410 |           createNewMission(result.position!);
        |           ^^^^^^^^^^^^^^^^
    411 |         }
    412 |
    413 |         setHomeLocationInput('');

ERROR in src/components/MissionPlannerOld.tsx:413:9
TS2304: Cannot find name 'setHomeLocationInput'.
    411 |         }
    412 |
  > 413 |         setHomeLocationInput('');
        |         ^^^^^^^^^^^^^^^^^^^^
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
    416 |         setGeocodingError(result.error || 'Failed to geocode location');

ERROR in src/components/MissionPlannerOld.tsx:416:9
TS2304: Cannot find name 'setGeocodingError'.
    414 |         console.log(`Home location set to: ${result.address || 'Manual coordinates'}`);
    415 |       } else {
  > 416 |         setGeocodingError(result.error || 'Failed to geocode location');
        |         ^^^^^^^^^^^^^^^^^
    417 |       }
    418 |     } catch (error) {
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');

ERROR in src/components/MissionPlannerOld.tsx:419:7
TS2304: Cannot find name 'setGeocodingError'.
    417 |       }
    418 |     } catch (error) {
  > 419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
        |       ^^^^^^^^^^^^^^^^^
    420 |     } finally {
    421 |       setIsGeocodingHome(false);
    422 |     }

ERROR in src/components/MissionPlannerOld.tsx:421:7
TS2304: Cannot find name 'setIsGeocodingHome'.
    419 |       setGeocodingError(error instanceof Error ? error.message : 'Geocoding failed');
    420 |     } finally {
  > 421 |       setIsGeocodingHome(false);
        |       ^^^^^^^^^^^^^^^^^^
    422 |     }
    423 |   };
    424 |

ERROR in src/components/MissionPlannerOld.tsx:453:9
TS2304: Cannot find name 'setState'.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |         ^^^^^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:453:18
TS7006: Parameter 'prev' implicitly has an 'any' type.
    451 |         };
    452 |
  > 453 |         setState(prev => ({
        |                  ^^^^
    454 |           ...prev,
    455 |           currentPlan: updatedPlan,
    456 |           selectedWaypoint: newWaypoint.id

ERROR in src/components/MissionPlannerOld.tsx:476:13
TS7006: Parameter 'wp' implicitly has an 'any' type.
    474 |   // Generate waypoint path for visualization
    475 |   const waypointPath = state.currentPlan?.waypoints
  > 476 |     .filter(wp => wp.id !== 'home')
        |             ^^
    477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
    478 |
    479 |   return (

ERROR in src/components/MissionPlannerOld.tsx:477:10
TS7006: Parameter 'wp' implicitly has an 'any' type.
    475 |   const waypointPath = state.currentPlan?.waypoints
    476 |     .filter(wp => wp.id !== 'home')
  > 477 |     .map(wp => [wp.position.latitude, wp.position.longitude] as [number, number]) || [];
        |          ^^
    478 |
    479 |   return (
    480 |     <div className={`mission-planner ${className || ''}`}>

ERROR in src/components/MissionPlannerOld.tsx:709:1
TS1128: Declaration or statement expected.
    707 |     </div>
    708 |   );
  > 709 | };
        | ^
    710 |
    711 | export default MissionPlanner;

The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.
